<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++运算符重载通用格式</title>
    <url>/2022/01/22/C-OperatorOverload/</url>
    <content><![CDATA[<p>摘自《C++ Primer》。</p>
<p>假设要在类<code>Test</code>上重载运算符。</p>
<h1 id="输入输出运算符"><a href="#输入输出运算符" class="headerlink" title="输入输出运算符"></a>输入输出运算符</h1><h2 id="输出运算符-lt-lt"><a href="#输出运算符-lt-lt" class="headerlink" title="输出运算符 &lt;&lt;"></a>输出运算符 <code>&lt;&lt;</code></h2><p>非成员函数，第一个形参为<code>ostream</code>引用，第二个形参为常量<code>Test</code>引用，返回<code>ostream</code>引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Test&amp; rhs) &#123;<span class="comment">/* ... */</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输入运算符-gt-gt"><a href="#输入运算符-gt-gt" class="headerlink" title="输入运算符 &gt;&gt;"></a>输入运算符 <code>&gt;&gt;</code></h2><p>非成员函数，第一个形参为<code>istream</code>引用，第二个形参为<code>Test</code>引用，返回<code>istream</code>引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(ostream&amp; is, Test&amp; rhs) &#123;<span class="comment">/* ... */</span>&#125;</span><br></pre></td></tr></table></figure>
<p>输入运算符重载的实现中应该含有对输入错误的处理，尽可能保证对象的安全。</p>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>非成员函数，形参均为常量<code>Test</code>引用，返回<code>Test</code>对象。</p>
<p>一般会定义一个对应的复合赋值运算符，通常使用复合赋值来定义算术运算符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test <span class="keyword">operator</span>+(<span class="keyword">const</span> Test&amp; lhs, <span class="keyword">const</span> Test&amp; rhs) </span><br><span class="line">&#123;</span><br><span class="line">    Test result = lhs;</span><br><span class="line">    result += rhs;  <span class="comment">//如果已经定义了对应的复合赋值运算</span></span><br><span class="line">    <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符 =="></a>相等运算符 <code>==</code></h2><p>非成员函数，形参均为常量<code>Test</code>引用，返回布尔类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Test&amp; lhs, <span class="keyword">const</span> Test&amp; rhs) &#123;<span class="comment">/* ... */</span>&#125;</span><br></pre></td></tr></table></figure>
<p>同时应利用相等运算符来定义不等运算符 <code>!=</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Test&amp; lhs, <span class="keyword">const</span> Test&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关系运算符-lt"><a href="#关系运算符-lt" class="headerlink" title="关系运算符 &lt;"></a>关系运算符 <code>&lt;</code></h2><p>非成员函数，形参均为常量<code>Test</code>引用，返回布尔类型。<br>如果需要关系运算符，先定义顺序关系，然后通过顺序关系和相等关系定义其他关系。<br>顺序关系的逻辑应当符合相等关系：若两个对象都不小于对方，那么它们应当相等。</p>
<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><h2 id="拷贝赋值"><a href="#拷贝赋值" class="headerlink" title="拷贝赋值 ="></a>拷贝赋值 <code>=</code></h2><p>成员函数，形参为常量<code>Test</code>引用，返回<code>Test</code>引用（左侧运算对象的引用）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; rhs) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h2><p>成员函数，形参为常量<code>Test</code>引用，返回<code>Test</code>引用（左侧运算对象的引用）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Test&amp; rhs) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="下标运算符"><a href="#下标运算符" class="headerlink" title="下标运算符 []"></a>下标运算符 <code>[]</code></h1><p>成员函数，形参为索引类型，返回所访问元素的引用。<br>通常应该定义两个版本，分别返回普通引用和返回常量引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设Test是一个容器，容器内对象为Object</span></span><br><span class="line"></span><br><span class="line">Object&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> n)   <span class="comment">//非常量形式 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> elements[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Object&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> n) <span class="keyword">const</span>   <span class="comment">//常量形式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> elements[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h1><p>通常用于迭代器类。</p>
<h2 id="前置递增递减"><a href="#前置递增递减" class="headerlink" title="前置递增递减"></a>前置递增递减</h2><p>成员函数，返回递增或递减后对象的引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设Test是一个迭代器，索引为index</span></span><br><span class="line"></span><br><span class="line">Test&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    ++index;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后置递增递减"><a href="#后置递增递减" class="headerlink" title="后置递增递减"></a>后置递增递减</h2><p>成员函数，返回原值（不是引用）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设Test是一个迭代器，索引为index</span></span><br><span class="line"></span><br><span class="line">Test <span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Test tmp = *<span class="keyword">this</span>;</span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h1><p>通常用于迭代器类和智能指针类。</p>
<h2 id="解引用"><a href="#解引用" class="headerlink" title="解引用 *"></a>解引用 <code>*</code></h2><p>成员函数，返回所指向对象的引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设Test是一个迭代器，索引为index，容器为Container，容器中对象为Object</span></span><br><span class="line"></span><br><span class="line">Object&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> Container[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="箭头-gt"><a href="#箭头-gt" class="headerlink" title="箭头 -&gt;"></a>箭头 <code>-&gt;</code></h2><p>成员函数，返回指向对象的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设Test是一个迭代器，索引为index，容器为Container，容器中对象为Object</span></span><br><span class="line"></span><br><span class="line">Object* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将实际工作委托给解引用运算符</span></span><br><span class="line">    <span class="keyword">return</span> &amp; <span class="keyword">this</span>-&gt;<span class="keyword">operator</span>*();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
