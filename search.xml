<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>codeforces 1665C</title>
    <url>/2022/05/03/codeforces-1665C/</url>
    <content><![CDATA[<p>题目思路很简单，先统计所有的父亲节点，按他们的子节点数目排序，贪心地从多到少开始病毒注入。<br>每个群体都注入一次后，接下来</p>
<ul>
<li>选取剩余最多的群体，注入一次</li>
<li>所有群体自动传染一次</li>
</ul>
<p>这最后一步有一两个坑，连续WA了四次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// type defination</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vi vector<span class="meta-string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vs vector<span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// macro defination</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SINGLECASE solve();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTICASE \</span></span><br><span class="line"><span class="meta">    int t;        \</span></span><br><span class="line"><span class="meta">    cin &gt;&gt; t;     \</span></span><br><span class="line"><span class="meta">    while (t--)   \</span></span><br><span class="line"><span class="meta">    &#123;             \</span></span><br><span class="line"><span class="meta">        solve();  \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FASTIO                   \</span></span><br><span class="line"><span class="meta">    ios::sync_with_stdio(false); \</span></span><br><span class="line"><span class="meta">    cin.tie(nullptr);            \</span></span><br><span class="line"><span class="meta">    cout.tie(nullptr);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fori(i, n) for (int i = 0; i &lt; n; i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="comment">// Write your program here</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录父亲节点和对应的群体数目</span></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; parents;</span><br><span class="line">    fori(i, n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        parents[tmp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    vi nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : parents)</span><br><span class="line">    &#123;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(p.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每个群体都要手动注入一次</span></span><br><span class="line">    <span class="keyword">int</span> ans = nums.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序之后模拟注入</span></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    fori(i, nums.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        nums[i] = <span class="built_in">max</span>(<span class="number">0</span>, nums[i] - i - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 执行完首轮注入后，根据剩余从大到小排序</span></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">rbegin</span>(), nums.<span class="built_in">rend</span>());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 坑：接下来要始终保持从大到小的顺序！</span></span><br><span class="line">    <span class="keyword">while</span> (!nums.<span class="built_in">empty</span>() &amp;&amp; nums.<span class="built_in">back</span>() &lt;= <span class="number">0</span>)</span><br><span class="line">        nums.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">while</span> (!nums.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 坑：要找到最后一个最大的！！才能保证顺序不乱</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        fori(i, m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[<span class="number">0</span>])</span><br><span class="line">                l = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[l]--;</span><br><span class="line">        fori(i, m) nums[i]--;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">while</span> (!nums.<span class="built_in">empty</span>() &amp;&amp; nums.<span class="built_in">back</span>() &lt;= <span class="number">0</span>)</span><br><span class="line">            nums.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="comment">// By default SINGLECASE</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FASTIO;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// SINGLECASE;</span></span><br><span class="line">    MULTICASE;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
</search>
